/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        System.out.println("hello world");
        int [] aay=roll(5);
        System.out.println(Arrays.toString(aay));
        int [] aray1={1,1,2,3};
        boolean doublicate=containsDuplicates(aray1);
        System.out.println(doublicate);
        float average=avg(aray1);
        System.out.println(average);
        int [][] arr3={{1,2,3},{1,2,3}};
        float avgtwo=avg2dimension(arr3);
        System.out.println(avgtwo);
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        HashSet <Integer> arr5=new HashSet <Integer>()  ;
        arr5=findmaxandunique(weeklyMonthTemperatures);
        for (Integer i:arr5){
           // System.out.println(i);
        }

        ArrayList<String> votes = new ArrayList ();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
       // System.out.println(votes.get(3));


       String winner = tally(votes);
        System.out.println(winner);

    }


   public static int[] roll(int num) {
        System.out.println("hello world");
        int [] arr=new int[num];
        Random rand=new Random();
        for(int i=0;i<num;i++){
            int x = rand.nextInt(5);
            x++;
            arr[i]=x;
        }
        return arr;
    }

    public static boolean containsDuplicates  (int[] arr) {
        boolean  containsDuplication=false;
for(int i=0;i<arr.length;i++){
    for(int j=0;j< arr.length;j++){
        if(i ==j){
            continue;
        }else {
            if(arr[i] == arr[j]){
                containsDuplication=true;
                break;
            }
        }


    }

    if(containsDuplication ==true){
        break;
    }
}
return containsDuplication;

    }


    public static float avg(int [] num){
        float sum=0;
        for(int i=0;i< num.length;i++){
            sum+=num[i];
        }

      return sum/ num.length;
    }
    public static float avg2dimension(int [][] arr){
        float sum=0;
        int size=0;
        for(int i=0;i< arr.length;i++){
            for (int k=0;k<arr[i].length;k++){
                sum+=arr[i][k];
                size++;
            }

        }
        return sum/size;

    }

    public static HashSet<Integer> findmaxandunique(int [][] arr){

        HashSet <Integer> uniQue=new HashSet <Integer>()  ;
     int high=0;
     int lOw=0;
     int []higharr=new int[arr.length];
     int []lOwarr=new int[arr.length];
     for(int i=0;i< arr.length;i++){
         higharr[i]= Arrays.stream(arr[i]).max().getAsInt();
         lOwarr[i]=Arrays.stream(arr[i]).min().getAsInt();
     }
     high=Arrays.stream(higharr).max().getAsInt();
     lOw=Arrays.stream(lOwarr).min().getAsInt();
        System.out.println(high);
        System.out.println(lOw);

        for(int i=lOw+1;i<high;i++){
         boolean notexist=false;

          for(int j=0;j< arr.length;j++){
            //  int getIndex = Arrays.asList(arr[j]).indexOf(i);
              for(int k=0;k<arr[j].length;k++){
                  if(arr[j][k]==i){
                     // System.out.println(arr[j][k]);
                     // System.out.println(i);

                      notexist=true;

                  }
              }
          }
          if(notexist ==false){
              uniQue.add(i);
          }
        }

        for (Integer i:uniQue){
        //  System.out.println(i);
        }
    return uniQue;

    }

    public static String  tally(ArrayList <String> arr){
     HashMap <String,Integer> candidate=new HashMap <String,Integer> ();
        int votess=0;
        String winner="";
     for(int i=0;i< arr.size();i++){

     //  System.out.println(arr.get(i));
         candidate.put(arr.get(i), 0);
     }
     for(String name:candidate.keySet()){
         int countA=Collections.frequency(arr,name);

//         System.out.println(name);
//         System.out.println(countA);
         candidate.put(name,countA);

     }
        for(String name:candidate.keySet()){
            if(candidate.get(name)>votess){
                winner=name;
                votess=candidate.get(name);
            }
         //   System.out.println(name);
           // System.out.println(candidate.get(name));

        }






     String  x =winner + " received the most votes!";
        //System.out.println(x);
     return x;

    }



}

